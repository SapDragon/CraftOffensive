// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shared.proto

#ifndef PROTOBUF_shared_2eproto__INCLUDED
#define PROTOBUF_shared_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_shared_2eproto();
void protobuf_AssignDesc_shared_2eproto();
void protobuf_ShutdownFile_shared_2eproto();

class SharedHandshake;
class SharedESPPlayer;
class SharedESP;

// ===================================================================

class SharedHandshake : public ::google::protobuf::Message {
 public:
  SharedHandshake();
  virtual ~SharedHandshake();

  SharedHandshake(const SharedHandshake& from);

  inline SharedHandshake& operator=(const SharedHandshake& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SharedHandshake& default_instance();

  void Swap(SharedHandshake* other);

  // implements Message ----------------------------------------------

  SharedHandshake* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SharedHandshake& from);
  void MergeFrom(const SharedHandshake& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SharedHandshake)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_shared_2eproto();
  friend void protobuf_AssignDesc_shared_2eproto();
  friend void protobuf_ShutdownFile_shared_2eproto();

  void InitAsDefaultInstance();
  static SharedHandshake* default_instance_;
};
// -------------------------------------------------------------------

class SharedESPPlayer : public ::google::protobuf::Message {
 public:
  SharedESPPlayer();
  virtual ~SharedESPPlayer();

  SharedESPPlayer(const SharedESPPlayer& from);

  inline SharedESPPlayer& operator=(const SharedESPPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SharedESPPlayer& default_instance();

  void Swap(SharedESPPlayer* other);

  // implements Message ----------------------------------------------

  SharedESPPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SharedESPPlayer& from);
  void MergeFrom(const SharedESPPlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 player_index = 1;
  inline bool has_player_index() const;
  inline void clear_player_index();
  static const int kPlayerIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 player_index() const;
  inline void set_player_index(::google::protobuf::uint32 value);

  // optional int32 origin_x = 2;
  inline bool has_origin_x() const;
  inline void clear_origin_x();
  static const int kOriginXFieldNumber = 2;
  inline ::google::protobuf::int32 origin_x() const;
  inline void set_origin_x(::google::protobuf::int32 value);

  // optional int32 origin_y = 3;
  inline bool has_origin_y() const;
  inline void clear_origin_y();
  static const int kOriginYFieldNumber = 3;
  inline ::google::protobuf::int32 origin_y() const;
  inline void set_origin_y(::google::protobuf::int32 value);

  // optional int32 origin_z = 4;
  inline bool has_origin_z() const;
  inline void clear_origin_z();
  static const int kOriginZFieldNumber = 4;
  inline ::google::protobuf::int32 origin_z() const;
  inline void set_origin_z(::google::protobuf::int32 value);

  // optional int32 health = 5;
  inline bool has_health() const;
  inline void clear_health();
  static const int kHealthFieldNumber = 5;
  inline ::google::protobuf::int32 health() const;
  inline void set_health(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SharedESPPlayer)
 private:
  inline void set_has_player_index();
  inline void clear_has_player_index();
  inline void set_has_origin_x();
  inline void clear_has_origin_x();
  inline void set_has_origin_y();
  inline void clear_has_origin_y();
  inline void set_has_origin_z();
  inline void clear_has_origin_z();
  inline void set_has_health();
  inline void clear_has_health();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 player_index_;
  ::google::protobuf::int32 origin_x_;
  ::google::protobuf::int32 origin_y_;
  ::google::protobuf::int32 origin_z_;
  ::google::protobuf::int32 health_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_shared_2eproto();
  friend void protobuf_AssignDesc_shared_2eproto();
  friend void protobuf_ShutdownFile_shared_2eproto();

  void InitAsDefaultInstance();
  static SharedESPPlayer* default_instance_;
};
// -------------------------------------------------------------------

class SharedESP : public ::google::protobuf::Message {
 public:
  SharedESP();
  virtual ~SharedESP();

  SharedESP(const SharedESP& from);

  inline SharedESP& operator=(const SharedESP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SharedESP& default_instance();

  void Swap(SharedESP* other);

  // implements Message ----------------------------------------------

  SharedESP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SharedESP& from);
  void MergeFrom(const SharedESP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SharedESPPlayer players = 1;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 1;
  inline const ::SharedESPPlayer& players(int index) const;
  inline ::SharedESPPlayer* mutable_players(int index);
  inline ::SharedESPPlayer* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::SharedESPPlayer >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::SharedESPPlayer >*
      mutable_players();

  // @@protoc_insertion_point(class_scope:SharedESP)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SharedESPPlayer > players_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_shared_2eproto();
  friend void protobuf_AssignDesc_shared_2eproto();
  friend void protobuf_ShutdownFile_shared_2eproto();

  void InitAsDefaultInstance();
  static SharedESP* default_instance_;
};
// ===================================================================


// ===================================================================

// SharedHandshake

// -------------------------------------------------------------------

// SharedESPPlayer

// optional uint32 player_index = 1;
inline bool SharedESPPlayer::has_player_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SharedESPPlayer::set_has_player_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SharedESPPlayer::clear_has_player_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SharedESPPlayer::clear_player_index() {
  player_index_ = 0u;
  clear_has_player_index();
}
inline ::google::protobuf::uint32 SharedESPPlayer::player_index() const {
  return player_index_;
}
inline void SharedESPPlayer::set_player_index(::google::protobuf::uint32 value) {
  set_has_player_index();
  player_index_ = value;
}

// optional int32 origin_x = 2;
inline bool SharedESPPlayer::has_origin_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SharedESPPlayer::set_has_origin_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SharedESPPlayer::clear_has_origin_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SharedESPPlayer::clear_origin_x() {
  origin_x_ = 0;
  clear_has_origin_x();
}
inline ::google::protobuf::int32 SharedESPPlayer::origin_x() const {
  return origin_x_;
}
inline void SharedESPPlayer::set_origin_x(::google::protobuf::int32 value) {
  set_has_origin_x();
  origin_x_ = value;
}

// optional int32 origin_y = 3;
inline bool SharedESPPlayer::has_origin_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SharedESPPlayer::set_has_origin_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SharedESPPlayer::clear_has_origin_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SharedESPPlayer::clear_origin_y() {
  origin_y_ = 0;
  clear_has_origin_y();
}
inline ::google::protobuf::int32 SharedESPPlayer::origin_y() const {
  return origin_y_;
}
inline void SharedESPPlayer::set_origin_y(::google::protobuf::int32 value) {
  set_has_origin_y();
  origin_y_ = value;
}

// optional int32 origin_z = 4;
inline bool SharedESPPlayer::has_origin_z() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SharedESPPlayer::set_has_origin_z() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SharedESPPlayer::clear_has_origin_z() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SharedESPPlayer::clear_origin_z() {
  origin_z_ = 0;
  clear_has_origin_z();
}
inline ::google::protobuf::int32 SharedESPPlayer::origin_z() const {
  return origin_z_;
}
inline void SharedESPPlayer::set_origin_z(::google::protobuf::int32 value) {
  set_has_origin_z();
  origin_z_ = value;
}

// optional int32 health = 5;
inline bool SharedESPPlayer::has_health() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SharedESPPlayer::set_has_health() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SharedESPPlayer::clear_has_health() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SharedESPPlayer::clear_health() {
  health_ = 0;
  clear_has_health();
}
inline ::google::protobuf::int32 SharedESPPlayer::health() const {
  return health_;
}
inline void SharedESPPlayer::set_health(::google::protobuf::int32 value) {
  set_has_health();
  health_ = value;
}

// -------------------------------------------------------------------

// SharedESP

// repeated .SharedESPPlayer players = 1;
inline int SharedESP::players_size() const {
  return players_.size();
}
inline void SharedESP::clear_players() {
  players_.Clear();
}
inline const ::SharedESPPlayer& SharedESP::players(int index) const {
  return players_.Get(index);
}
inline ::SharedESPPlayer* SharedESP::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::SharedESPPlayer* SharedESP::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SharedESPPlayer >&
SharedESP::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::SharedESPPlayer >*
SharedESP::mutable_players() {
  return &players_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_shared_2eproto__INCLUDED
