// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shared.proto

#ifndef PROTOBUF_shared_2eproto__INCLUDED
#define PROTOBUF_shared_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_shared_2eproto();
void protobuf_AssignDesc_shared_2eproto();
void protobuf_ShutdownFile_shared_2eproto();

class SharedHeader;
class SharedHandshake;

// ===================================================================

class SharedHeader : public ::google::protobuf::Message {
 public:
  SharedHeader();
  virtual ~SharedHeader();

  SharedHeader(const SharedHeader& from);

  inline SharedHeader& operator=(const SharedHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SharedHeader& default_instance();

  void Swap(SharedHeader* other);

  // implements Message ----------------------------------------------

  SharedHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SharedHeader& from);
  void MergeFrom(const SharedHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string header = 1 [default = "BIDEN"];
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::std::string& header() const;
  inline void set_header(const ::std::string& value);
  inline void set_header(const char* value);
  inline void set_header(const char* value, size_t size);
  inline ::std::string* mutable_header();
  inline ::std::string* release_header();
  inline void set_allocated_header(::std::string* header);

  // optional uint32 size = 2;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 2;
  inline ::google::protobuf::uint32 size() const;
  inline void set_size(::google::protobuf::uint32 value);

  // optional uint32 steam_id = 3;
  inline bool has_steam_id() const;
  inline void clear_steam_id();
  static const int kSteamIdFieldNumber = 3;
  inline ::google::protobuf::uint32 steam_id() const;
  inline void set_steam_id(::google::protobuf::uint32 value);

  // optional uint32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SharedHeader)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_steam_id();
  inline void clear_has_steam_id();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* header_;
  static ::std::string* _default_header_;
  ::google::protobuf::uint32 size_;
  ::google::protobuf::uint32 steam_id_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_shared_2eproto();
  friend void protobuf_AssignDesc_shared_2eproto();
  friend void protobuf_ShutdownFile_shared_2eproto();

  void InitAsDefaultInstance();
  static SharedHeader* default_instance_;
};
// -------------------------------------------------------------------

class SharedHandshake : public ::google::protobuf::Message {
 public:
  SharedHandshake();
  virtual ~SharedHandshake();

  SharedHandshake(const SharedHandshake& from);

  inline SharedHandshake& operator=(const SharedHandshake& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SharedHandshake& default_instance();

  void Swap(SharedHandshake* other);

  // implements Message ----------------------------------------------

  SharedHandshake* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SharedHandshake& from);
  void MergeFrom(const SharedHandshake& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SharedHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::SharedHeader& header() const;
  inline ::SharedHeader* mutable_header();
  inline ::SharedHeader* release_header();
  inline void set_allocated_header(::SharedHeader* header);

  // @@protoc_insertion_point(class_scope:SharedHandshake)
 private:
  inline void set_has_header();
  inline void clear_has_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SharedHeader* header_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_shared_2eproto();
  friend void protobuf_AssignDesc_shared_2eproto();
  friend void protobuf_ShutdownFile_shared_2eproto();

  void InitAsDefaultInstance();
  static SharedHandshake* default_instance_;
};
// ===================================================================


// ===================================================================

// SharedHeader

// optional string header = 1 [default = "BIDEN"];
inline bool SharedHeader::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SharedHeader::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SharedHeader::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SharedHeader::clear_header() {
  if (header_ != _default_header_) {
    header_->assign(*_default_header_);
  }
  clear_has_header();
}
inline const ::std::string& SharedHeader::header() const {
  return *header_;
}
inline void SharedHeader::set_header(const ::std::string& value) {
  set_has_header();
  if (header_ == _default_header_) {
    header_ = new ::std::string;
  }
  header_->assign(value);
}
inline void SharedHeader::set_header(const char* value) {
  set_has_header();
  if (header_ == _default_header_) {
    header_ = new ::std::string;
  }
  header_->assign(value);
}
inline void SharedHeader::set_header(const char* value, size_t size) {
  set_has_header();
  if (header_ == _default_header_) {
    header_ = new ::std::string;
  }
  header_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SharedHeader::mutable_header() {
  set_has_header();
  if (header_ == _default_header_) {
    header_ = new ::std::string(*_default_header_);
  }
  return header_;
}
inline ::std::string* SharedHeader::release_header() {
  clear_has_header();
  if (header_ == _default_header_) {
    return NULL;
  } else {
    ::std::string* temp = header_;
    header_ = const_cast< ::std::string*>(_default_header_);
    return temp;
  }
}
inline void SharedHeader::set_allocated_header(::std::string* header) {
  if (header_ != _default_header_) {
    delete header_;
  }
  if (header) {
    set_has_header();
    header_ = header;
  } else {
    clear_has_header();
    header_ = const_cast< ::std::string*>(_default_header_);
  }
}

// optional uint32 size = 2;
inline bool SharedHeader::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SharedHeader::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SharedHeader::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SharedHeader::clear_size() {
  size_ = 0u;
  clear_has_size();
}
inline ::google::protobuf::uint32 SharedHeader::size() const {
  return size_;
}
inline void SharedHeader::set_size(::google::protobuf::uint32 value) {
  set_has_size();
  size_ = value;
}

// optional uint32 steam_id = 3;
inline bool SharedHeader::has_steam_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SharedHeader::set_has_steam_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SharedHeader::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SharedHeader::clear_steam_id() {
  steam_id_ = 0u;
  clear_has_steam_id();
}
inline ::google::protobuf::uint32 SharedHeader::steam_id() const {
  return steam_id_;
}
inline void SharedHeader::set_steam_id(::google::protobuf::uint32 value) {
  set_has_steam_id();
  steam_id_ = value;
}

// optional uint32 type = 4;
inline bool SharedHeader::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SharedHeader::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SharedHeader::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SharedHeader::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 SharedHeader::type() const {
  return type_;
}
inline void SharedHeader::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// SharedHandshake

// optional .SharedHeader header = 1;
inline bool SharedHandshake::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SharedHandshake::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SharedHandshake::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SharedHandshake::clear_header() {
  if (header_ != NULL) header_->::SharedHeader::Clear();
  clear_has_header();
}
inline const ::SharedHeader& SharedHandshake::header() const {
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::SharedHeader* SharedHandshake::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::SharedHeader;
  return header_;
}
inline ::SharedHeader* SharedHandshake::release_header() {
  clear_has_header();
  ::SharedHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void SharedHandshake::set_allocated_header(::SharedHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_shared_2eproto__INCLUDED
